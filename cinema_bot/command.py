# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ª–æ–≥—ñ–∫–∞ üé¨

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from config import ADMIN_ID
from data import Database
from keyboards import (
    main_menu,
    films_keyboard,
    genres_keyboard,
    film_actions,
    rating_keyboard,
    confirm_keyboard,
    edit_keyboard,
)
from models import AddFilm, EditFilm

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

router = Router()
db = Database()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
def is_admin(uid: int) -> bool:
    try:
        return int(uid) in [int(admin_id) for admin_id in ADMIN_ID]
    except Exception:
        return False

# –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–∫–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ñ—ñ–ª—å–º
async def show_card(message, film: dict) -> None:
    text = (
        f"üé¨ <b>{film.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}</b>\n\n"
        f"üé≠ <b>–ñ–∞–Ω—Ä:</b> {film.get('genre', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {film.get('rating', 0):.2f} / 10 ({film.get('votes', 0)} –≥–æ–ª–æ—Å—ñ–≤)\n\n"
        f"üìñ <b>–û–ø–∏—Å:</b>\n<i>{film.get('description', '–Ω–µ–º–∞—î –æ–ø–∏—Å—É')}</i>\n\n"
        f"üë• <b>–ê–∫—Ç–æ—Ä–∏:</b> {film.get('actors', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}"
    )
    user_id = getattr(message.from_user, "id", None)
    admin = is_admin(user_id) if user_id else False
    kb = film_actions(film['id'], admin=admin)  # –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
    poster = film.get('poster') or ""
    if poster.startswith(("http://", "https://")):
        try:
            await message.answer_photo(photo=poster, caption=text, reply_markup=kb.as_markup())
            return
        except Exception:
            pass
    await message.answer(text, reply_markup=kb.as_markup())

# --- –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ---

@router.message(Command("start", "help"))
async def cmd_start(message: Message):
    await message.answer(
        "üé≠ <b>–ö—ñ–Ω–æ–∞—Ñ—ñ—à–∞</b>\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/films - –≤—Å—ñ —Ñ—ñ–ª—å–º–∏\n"
        "/search - –ø–æ—à—É–∫\n"
        "/genres - —Ñ—ñ–ª—å–º–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º\n"
        "/random - –≤–∏–ø–∞–¥–∫–æ–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è\n"
        "/favorites - –º–æ—ó —É–ª—é–±–ª–µ–Ω—ñ\n"
        "/add - –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)\n"
        "/delete - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å–º (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)",
        reply_markup=main_menu()
    )

@router.message(Command("films"))
async def cmd_films(message: Message):
    films = db.get_films()
    if not films:
        await message.answer("üì≠ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –ø–æ—Ä–æ–∂–Ω—è. –ê–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º –∫–æ–º–∞–Ω–¥–æ—é /add")
        return
    
    user_id = message.from_user.id
    admin = is_admin(user_id)
    
    kb = films_keyboard(films)
    await message.answer("üé• –£—Å—ñ —Ñ—ñ–ª—å–º–∏:", reply_markup=kb.as_markup())
    
    if admin:
        await message.answer("‚öôÔ∏è –Ø–∫ –∞–¥–º—ñ–Ω, –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –Ω–∏—Ö")

@router.message(Command("genres"))
async def cmd_genres(message: Message):
    films = db.get_films()
    if not films:
        await message.answer("üì≠ –ù–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
        return
    genres = sorted({(m.get("genre") or "").strip() for m in films if m.get("genre")})
    if not genres:
        await message.answer("üì≠ –ñ–∞–Ω—Ä–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ")
        return
    kb = genres_keyboard(genres)
    await message.answer("üé≠ –û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", reply_markup=kb.as_markup())

@router.message(Command("random"))
async def cmd_random(message: Message):
    f = db.random_film()
    if not f:
        await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
        return
    await show_card(message, f)

@router.message(Command("favorites"))
async def cmd_favorites(message: Message):
    favs = db.get_favorites(message.from_user.id)
    if not favs:
        await message.answer("‚ù§Ô∏è –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤")
        return
    
    user_id = message.from_user.id
    admin = is_admin(user_id)
    
    kb = films_keyboard(favs, prefix="movie_")
    await message.answer("‚ù§Ô∏è –í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ:", reply_markup=kb.as_markup())
    
    if admin:
        await message.answer("‚öôÔ∏è –Ø–∫ –∞–¥–º—ñ–Ω, –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –Ω–∏—Ö")

@router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext):
    await state.set_state("waiting_for_search")
    await message.answer("üîç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ—à—É–∫—É")

@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏")
        return
    await state.set_state(AddFilm.title)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É")

@router.message(Command("delete"))
async def cmd_delete(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ñ—ñ–ª—å–º–∏")
        return
    films = db.get_films()
    if not films:
        await message.answer("–ù–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
        return
    kb = films_keyboard(films, prefix="delete_")
    await message.answer("üóëÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å–º –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb.as_markup())

# --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö –ó –ï–ú–û–î–ó–ò ---

@router.message(F.text == "üé¨ /films")
async def handle_films_button(message: Message):
    await cmd_films(message)

@router.message(F.text == "üîé /search")
async def handle_search_button(message: Message, state: FSMContext):
    await cmd_search(message, state)

@router.message(F.text == "üé≠ /genres")
async def handle_genres_button(message: Message):
    await cmd_genres(message)

@router.message(F.text == "üé≤ /random")
async def handle_random_button(message: Message):
    await cmd_random(message)

@router.message(F.text == "‚≠ê /favorites")
async def handle_favorites_button(message: Message):
    await cmd_favorites(message)

# --- –û–ë–†–û–ë–ù–ò–ö–ò CALLBACK ---

@router.callback_query(F.data.startswith("movie_"))
async def show_film_callback(callback: CallbackQuery):
    film_id = int(callback.data.split("_")[1])
    film = db.get_film_by_id(film_id)
    if not film:
        await callback.message.answer("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return
    
    await show_card(callback.message, film)
    await callback.answer()

@router.callback_query(F.data.startswith("genre_"))
async def show_genre_films(callback: CallbackQuery):
    genre_encoded = callback.data.split("_", 1)[1]
    genre = genre_encoded.replace('_', ' ')
    films = db.filter_by_genre(genre)
    if not films:
        await callback.message.answer(f"‚ùå –ù–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤ —É –∂–∞–Ω—Ä—ñ '{genre}'")
        await callback.answer()
        return
    
    user_id = callback.from_user.id
    admin = is_admin(user_id)
    
    kb = films_keyboard(films)
    await callback.message.answer(f"üé≠ –§—ñ–ª—å–º–∏ —É –∂–∞–Ω—Ä—ñ '{genre}':", reply_markup=kb.as_markup())
    
    if admin:
        await callback.message.answer("‚öôÔ∏è –Ø–∫ –∞–¥–º—ñ–Ω, –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –Ω–∏—Ö")
    
    await callback.answer()

@router.callback_query(F.data.startswith("fav_"))
async def toggle_favorite(callback: CallbackQuery):
    film_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    added = db.toggle_favorite(film_id, user_id)
    action = "–¥–æ–¥–∞–Ω–æ –¥–æ" if added else "–≤–∏–¥–∞–ª–µ–Ω–æ –∑"
    await callback.answer(f"‚ù§Ô∏è –§—ñ–ª—å–º {action} —É–ª—é–±–ª–µ–Ω–∏—Ö")

@router.callback_query(F.data.startswith("rate_"))
async def rate_film(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) == 2:
        # –ü–æ–∫–∞–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        film_id = int(parts[1])
        kb = rating_keyboard(film_id)
        await callback.message.answer("‚≠ê –û–±–µ—Ä—ñ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (1-10):", reply_markup=kb.as_markup())
    elif len(parts) == 3:
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–µ–π—Ç–∏–Ω–≥—É
        film_id = int(parts[1])
        rating = int(parts[2])
        user_id = callback.from_user.id
        avg_rating = db.add_rating(film_id, user_id, rating)
        await callback.message.answer(f"‚≠ê –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ {rating}/10 –¥–æ–¥–∞–Ω–æ! –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}")
    await callback.answer()

# --- FSM –ø—Ä–æ—Ü–µ—Å–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è ---

@router.message(StateFilter(AddFilm.title))
async def process_title(message: Message, state: FSMContext):
    title = (message.text or "").strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
        return
    await state.update_data(title=title)
    await state.set_state(AddFilm.genre)
    await message.answer("üé≠ –í–∫–∞–∂—ñ—Ç—å –∂–∞–Ω—Ä")

@router.message(StateFilter(AddFilm.genre))
async def process_genre(message: Message, state: FSMContext):
    genre = (message.text or "").strip()
    if not genre:
        await message.answer("–ñ–∞–Ω—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        return
    await state.update_data(genre=genre)
    await state.set_state(AddFilm.description)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ñ—ñ–ª—å–º—É")

@router.message(StateFilter(AddFilm.description))
async def process_description(message: Message, state: FSMContext):
    description = (message.text or "").strip()
    await state.update_data(description=description)
    await state.set_state(AddFilm.actors)
    await message.answer("üë• –í–≤–µ–¥—ñ—Ç—å –∞–∫—Ç–æ—Ä—ñ–≤ (—á–µ—Ä–µ–∑ –∫–æ–º—É)")

@router.message(StateFilter(AddFilm.actors))
async def process_actors(message: Message, state: FSMContext):
    actors = (message.text or "").strip()
    await state.update_data(actors=actors)
    await state.set_state(AddFilm.poster)
    await message.answer("üñº –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç–µ—Ä (–∞–±–æ '-' —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)")

@router.message(StateFilter(AddFilm.poster))
async def process_poster(message: Message, state: FSMContext):
    poster = (message.text or "").strip()
    data = await state.get_data()
    
    # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å–º –¥–æ –±–∞–∑–∏
    new_film = db.add_film(
        title=data['title'],
        genre=data['genre'],
        description=data['description'],
        actors=data['actors'],
        poster=poster if poster != '-' else ""
    )
    
    await message.answer(f"‚úÖ –§—ñ–ª—å–º '{new_film['title']}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    await state.clear()

# --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –§–Ü–õ–¨–ú–Ü–í ---

@router.callback_query(F.data.startswith("edit_"))
async def process_edit(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏")
        return
    
    film_id = int(callback.data.split("_")[1])
    film = db.get_film_by_id(film_id)
    if not film:
        await callback.message.answer("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return
    
    kb = edit_keyboard(film_id)
    await callback.message.answer("‚úèÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("editfield_"))
async def process_edit_field(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏")
        return
    
    parts = callback.data.split("_")
    film_id = int(parts[1])
    field = parts[2]
    
    film = db.get_film_by_id(film_id)
    if not film:
        await callback.message.answer("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    await state.update_data(film_id=film_id, field=field)
    await state.set_state(EditFilm.new_value)
    
    field_names = {
        'title': '–Ω–∞–∑–≤—É',
        'genre': '–∂–∞–Ω—Ä', 
        'description': '–æ–ø–∏—Å',
        'actors': '–∞–∫—Ç–æ—Ä—ñ–≤',
        'poster': '–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç–µ—Ä'
    }
    
    current_value = film.get(field, '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')
    await callback.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {field_names[field]}:\n"
        f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_value}\n\n"
        f"–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å '-'"
    )
    await callback.answer()

@router.message(StateFilter(EditFilm.new_value))
async def process_edit_value(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏")
        await state.clear()
        return
    
    data = await state.get_data()
    film_id = data['film_id']
    field = data['field']
    new_value = message.text.strip()
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ
    db.update_field(film_id, field, new_value)
    
    film = db.get_film_by_id(film_id)
    await message.answer(f"‚úÖ –ü–æ–ª–µ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\nüé¨ –§—ñ–ª—å–º: {film['title']}")
    await show_card(message, film)
    await state.clear()

@router.callback_query(F.data.startswith("delete_"))
async def process_delete(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ñ—ñ–ª—å–º–∏")
        return
    
    film_id = int(callback.data.split("_")[1])
    film = db.get_film_by_id(film_id)
    if not film:
        await callback.message.answer("‚ùå –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ—ñ–ª—å–º
    db.delete_film(film_id)
    await callback.message.answer(f"üóëÔ∏è –§—ñ–ª—å–º '{film['title']}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await callback.answer()

# --- –ü–æ—à—É–∫ ---

@router.message(F.state == "waiting_for_search")
async def handle_search_input(message: Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer("üîç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ—à—É–∫—É")
        return
    
    films = db.search_films(query)
    if not films:
        await message.answer("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return
    
    user_id = message.from_user.id
    admin = is_admin(user_id)
    
    if len(films) == 1:
        await show_card(message, films[0])
    else:
        kb = films_keyboard(films)
        await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(films)} —Ñ—ñ–ª—å–º—ñ–≤:", reply_markup=kb.as_markup())
        if admin:
            await message.answer("‚öôÔ∏è –Ø–∫ –∞–¥–º—ñ–Ω, –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –Ω–∏—Ö")
    
    await state.clear()

# --- –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ (—è–∫—â–æ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –ø–æ—à—É–∫—É) ---
@router.message(F.text & ~F.text.startswith('/') & 
               ~F.text.in_(["üé¨ /films", "üîé /search", "üé≠ /genres", "üé≤ /random", "‚≠ê /favorites"]))
async def handle_general_search(message: Message):
    query = message.text.strip()
    if not query:
        return
    
    films = db.search_films(query)
    if not films:
        await message.answer("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if len(films) == 1:
        await show_card(message, films[0])
    else:
        kb = films_keyboard(films)
        await message.answer(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(films)} —Ñ—ñ–ª—å–º—ñ–≤:", reply_markup=kb.as_markup())